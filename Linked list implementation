#include <iostream>
using namespace std;

// Node structure for linked list
struct Node {
    int col;
    int value;
    Node* next;
    
    Node(int col, int value) : col(col), value(value), next(nullptr) {}
};

// LinkedList class
class LinkedList {
private:
    Node* head;
public:
    LinkedList() : head(nullptr) {}

    // Insert a new node at the end of the linked list
    void insert(int col, int value) {
        Node* newNode = new Node(col, value);
        if (head == nullptr) {
            head = newNode;
        } else {
            Node* current = head;
            while (current->next != nullptr) {
                current = current->next;
            }
            current->next = newNode;
        }
    }

    // Display the linked list
    void display() {
        Node* current = head;
        while (current != nullptr) {
            cout << "(" << current->col << ", " << current->value << ") -> ";
            current = current->next;
        }
        cout << "None" << endl;
    }

    // Destructor to free memory
    ~LinkedList() {
        Node* current = head;
        while (current != nullptr) {
            Node* next = current->next;
            delete current;
            current = next;
        }
    }
};

// SparseMatrix class
class SparseMatrix {
private:
    int rows, cols;
    LinkedList* matrix;
public:
    SparseMatrix(int rows, int cols) : rows(rows), cols(cols) {
        matrix = new LinkedList[rows];
    }

    // Insert value at given position
    void insert(int row, int col, int value) {
        if (row < 0 || row >= rows || col < 0 || col >= cols) {
            cout << "Invalid row or column index." << endl;
            return;
        }
        matrix[row].insert(col, value);
    }

    // Display the matrix
    void display() {
        for (int i = 0; i < rows; ++i) {
            cout << "Row " << i << ": ";
            matrix[i].display();
        }
    }

    // Destructor to free memory
    ~SparseMatrix() {
        delete[] matrix;
    }
};

// Example usage
int main() {
    SparseMatrix sparseMatrix(4, 5);
    sparseMatrix.insert(0, 2, 3);
    sparseMatrix.insert(0, 4, 4);
    sparseMatrix.insert(1, 2, 5);
    sparseMatrix.insert(1, 3, 7);
    sparseMatrix.insert(3, 1, 2);
    sparseMatrix.insert(3, 2, 6);
    sparseMatrix.display();

    return 0;
}
