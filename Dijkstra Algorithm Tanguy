#include <iostream>
#include <vector>
#include <limits>
#include <algorithm>
using namespace std;

// Structure to represent a node in the graph
struct Node {
    int index;  // Index of the node
    int distance;  // Distance from the source node
    bool visited;  // Whether the node is visited
    Node* parent;  // Parent node in the shortest path
    vector<pair<Node*, int>> neighbors;  // Neighboring nodes and their edge weights

    Node(int i) : index(i), distance(numeric_limits<int>::max()), visited(false), parent(nullptr) {}
};

// Dijkstra's Algorithm function
void dijkstra(vector<Node*>& graph, int start) {
    graph[start]->distance = 0;

    // Loop until all nodes are visited
    while (true) {
        // Find the unvisited node with the smallest distance
        Node* current = nullptr;
        for (Node* node : graph) {
            if (!node->visited && (current == nullptr || node->distance < current->distance)) {
                current = node;
            }
        }

        // If all nodes are visited or no reachable nodes remain
        if (current == nullptr)
            break;

        // Mark current node as visited
        current->visited = true;

        // Update distances of neighbors
        for (auto& neighbor : current->neighbors) {
            if (!neighbor.first->visited) {
                int new_distance = current->distance + neighbor.second;
                if (new_distance < neighbor.first->distance) {
                    neighbor.first->distance = new_distance;
                    neighbor.first->parent = current;
                }
            }
        }
    }
}

// Function to retrieve the shortest path given the destination node
vector<Node*> getShortestPath(Node* destination) {
    vector<Node*> path;
    for (Node* current = destination; current != nullptr; current = current->parent) {
        path.push_back(current);
    }
    reverse(path.begin(), path.end());
    return path;
}

int main() {
    // Example graph representation
    vector<Node*> graph(5); // assuming 5 nodes

    // Initialize nodes
    for (int i = 0; i < 5; ++i) {
        graph[i] = new Node(i);
    }

    // Adding edges and their weights
    graph[0]->neighbors = {{graph[1], 10}, {graph[2], 5}};
    graph[1]->neighbors = {{graph[3], 3}, {graph[2], 2}};
    graph[2]->neighbors = {{graph[1], 3}, {graph[3], 9}, {graph[4], 2}};
    graph[3]->neighbors = {{graph[4], 2}};
    graph[4]->neighbors = {};

    int start, end;
    cout << "Enter starting node: ";
    cin >> start;
    cout << "Enter ending node: ";
    cin >> end;

    // Run Dijkstra's Algorithm
    dijkstra(graph, start);

    // Retrieve shortest path and its cost
    vector<Node*> shortestPath = getShortestPath(graph[end]);
    int shortestPathCost = graph[end]->distance;

    // Output shortest path and its cost
    cout << "Shortest path from node " << start << " to node " << end << " is: ";
    for (Node* node : shortestPath) {
        cout << node->index << " ";
    }
    cout << "\nShortest path cost: " << shortestPathCost << endl;

    // Clean up memory
    for (Node* node : graph) {
        delete node;
    }

    return 0;
}
